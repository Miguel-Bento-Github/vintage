rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Products - read public, write admin only
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
      allow delete: if isAdmin();
    }

    // Orders - SECURE: Server-side only via Admin SDK
    // Orders are created by Stripe webhook using Admin SDK (bypasses these rules)
    // Users access orders via unique order ID after successful Stripe payment
    // The order ID URL acts as the authentication token
    match /orders/{orderId} {
      // Only admins can list/query all orders
      allow list: if isAdmin();

      // Anyone with the order ID can read that specific order
      // This is safe because order IDs are unpredictable Firestore auto-IDs
      // returned only after successful Stripe payment
      allow get: if true;

      // Allow server-side order creation from API routes
      // Server requests have no auth context (request.auth == null)
      // Client-side creation still blocked by requiring auth == null
      allow create: if request.auth == null || isAdmin();

      // Only admins can update order status
      allow update: if isAdmin();

      // No deletes allowed
      allow delete: if false;
    }

    // Customers - users can read/write their own data
    match /customers/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Admins - admin only read
    match /admins/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false; // Manually managed in console
      allow delete: if false;
    }
  }
}
